name: Cloud-0

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mariadb:${GITHUB_SHA::7} -f ./mariadb/Dockerfile ./mariadb
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mariadb:${GITHUB_SHA::7}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${GITHUB_SHA::7} -f ./nginx/Dockerfile ./nginx
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${GITHUB_SHA::7}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Проверка формата ключа (удалите этот шаг после отладки!)
      - name: Debug SSH key format
        run: |
          echo "First line of SSH key: "
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -1
          echo "Key has following number of lines: "
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | wc -l
      
      # Альтернативный способ с использованием действия для SSH
      - name: Deploy via ssh-action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Stopping and removing old containers..."
            docker stop nginx mariadb || true
            docker rm nginx mariadb || true

            echo "Pulling latest images..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/mariadb:${GITHUB_SHA::7}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${GITHUB_SHA::7}

            echo "Starting containers with docker-compose..."
            cd ~/cloud-1
            docker-compose up -d

            echo "Setting up firewall (UFW)..."
            sudo apt update
            sudo apt install -y ufw
            sudo ufw allow OpenSSH
            sudo ufw allow 80
            sudo ufw allow 443
            sudo ufw deny 3306
            sudo ufw --force enable
            sudo ufw status

            echo "Deployment complete! or not"